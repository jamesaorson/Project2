package project2;
import java.awt.event.KeyEvent;
import numeric.Factorial;
import numeric.NegativeFactorialException;
import numeric.OverflowException;

/**
  * This class implements the Factorial dialog, 
  * including all of its visuals and events.
  *
  * @author James Osborne
  * @version 1.0  
  * File: FactorialDialog.java
  * Created: 20 Sept 2016
  * Â©Copyright James Osborne. All rights reserved.
  * Summary of Modifications:
  *     20 Sept 2016 - JAO - Created text fields (input, result,
  *     errors), labels (GCD, result, errors), and compute button. Also added
  *     functionality to all of these and made result and errors text fields
  *     unable to be edited.
  * 
  * Description: This class provides the design and functionality of the 
  * Factorial dialog which will allow the factorial to be calculated
  * for any valid, non-negative integer.
  */
public class FactorialDialog extends javax.swing.JDialog {

    /**
     * Creates new form FactorialDialog1
     */
    public FactorialDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        factorialLabel = new javax.swing.JLabel();
        inputField = new javax.swing.JTextField();
        computeButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();
        resultField = new javax.swing.JTextField();
        errorsLabel = new javax.swing.JLabel();
        errorsField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        factorialLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        factorialLabel.setText("Factorial");

        inputField.setText("Enter one number here");
        inputField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputFieldFocusGained(evt);
            }
        });
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputFieldEnterKeyPressed(evt);
            }
        });

        computeButton.setText("Compute");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultLabel.setText("Result");

        resultField.setEditable(false);
        resultField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        errorsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorsLabel.setText("Errors");

        errorsField.setEditable(false);
        errorsField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(factorialLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(inputField, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(computeButton))
                            .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resultField)
                            .addComponent(errorsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(errorsField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(factorialLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computeButton))
                .addGap(18, 18, 18)
                .addComponent(resultLabel)
                .addGap(18, 18, 18)
                .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(errorsLabel)
                .addGap(18, 18, 18)
                .addComponent(errorsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //However user selects inputField, it will highlight and select the text
    //currently in the field allowing quicker editing.
    private void inputFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputFieldFocusGained
        inputField.selectAll();
    }//GEN-LAST:event_inputFieldFocusGained

    //If the enter key is pressed while focus is on inputField,
    //activates compute button as if it was explicitly clicked.
    private void inputFieldEnterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldEnterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            computeButton.doClick();
        }
    }//GEN-LAST:event_inputFieldEnterKeyPressed

    //When the compute button is activated, this method does any necessary
    //error handling and sets all relevant text fields 
    //with their new corresponding data to inform the user.
    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        //Clears text fields to avoid display of unnecessary information.
        resultField.setText("");
        errorsField.setText("");

        //Tries on dangerous operations of using Integer.parseInt()
        //and Factorial.computeFactorial()
        try {
            int input;
            double factorial;

            input = Integer.parseInt(inputField.getText());
            factorial = Factorial.computeFactorial(input);

            //Displays answer in resultField if no exceptions are thrown.
            resultField.setText(Double.toString(factorial));
        }

        //Catches possible exception thrown from Integer.parseInt() and displays
        //error message to errorsField.
        catch (NumberFormatException e) {
            errorsField.setText("Both inputs must be valid integers");
        }
        //Catches possible exceptions thrown from Factorial.computeFactorial()
        //and displays their error message to errorsField.
        catch (NegativeFactorialException | OverflowException e) {
            errorsField.setText(e.getMessage());
        }
    }//GEN-LAST:event_computeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FactorialDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FactorialDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FactorialDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FactorialDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FactorialDialog dialog = new FactorialDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton computeButton;
    private javax.swing.JTextField errorsField;
    private javax.swing.JLabel errorsLabel;
    private javax.swing.JLabel factorialLabel;
    private javax.swing.JTextField inputField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField resultField;
    private javax.swing.JLabel resultLabel;
    // End of variables declaration//GEN-END:variables
}
