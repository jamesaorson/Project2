package project2;
import java.awt.event.KeyEvent;
import numeric.Gcd;

/**
  * This class implements the GCD GUI, including all of its visuals and events.
  *
  * @author James Osborne
  * @version 1.0  
  * File: GCDDialog.java
  * Created: 20 Sept 2016
  * Â©Copyright James Osborne. All rights reserved.
  * Summary of Modifications:
  *     20 Sept 2016 - JAO - Created text fields (input1, input2, result,
  *     errors), labels (GCD, result, errors), and compute button. Also added
  *     functionality to all of these and made result and errors text fields
  *     unable to be edited.
  * 
  * Description: This class provides the design and functionality of the 
  * GCD GUI which will allow the calculation of the GCD of any two integers.
  */
public class GCDDialog extends javax.swing.JFrame {

    /**
     * Creates new form GCDDialog
     */
    public GCDDialog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        gcdLabel = new javax.swing.JLabel();
        inputField1 = new javax.swing.JTextField();
        computeButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();
        resultField = new javax.swing.JTextField();
        errorsLabel = new javax.swing.JLabel();
        errorsField = new javax.swing.JTextField();
        inputField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        gcdLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gcdLabel.setText("GCD");

        inputField1.setText("Enter first number");
        inputField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputField1FocusGained(evt);
            }
        });
        inputField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputField1EnterKeyPressed(evt);
            }
        });

        computeButton.setText("Compute");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        resultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultLabel.setText("Result");

        resultField.setEditable(false);
        resultField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        errorsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorsLabel.setText("Errors");

        errorsField.setEditable(false);
        errorsField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        inputField2.setText("Enter second number");
        inputField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputField2FocusGained(evt);
            }
        });
        inputField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputField2EnterKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gcdLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(inputField1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputField2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(computeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(resultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resultField)
                            .addComponent(errorsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(errorsField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gcdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computeButton)
                    .addComponent(inputField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(resultLabel)
                .addGap(18, 18, 18)
                .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(errorsLabel)
                .addGap(18, 18, 18)
                .addComponent(errorsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //When the compute button is activated, this method does any necessary
    //error handling and sets all relevant text fields 
    //with their new corresponding data to inform the user.
    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        //Clears text fiels to avoid display of unnecessary information.
        resultField.setText("");
        errorsField.setText("");
        
        //Tries on dangerous operation of using Integer.parseInt()
        try {
            int x;
            int y;
            int gcd;
            
            x = Integer.parseInt(inputField1.getText());
            y = Integer.parseInt(inputField2.getText());
            gcd = Gcd.computeGCD(x, y);
            
            //Displays answer in resultField as long as Integer.parseInt()
            //did not throw any exceptions.
            resultField.setText(Integer.toString(gcd));
        }
        
        //Catches possible exception thrown from Integer.parseInt() and displays
        //error message to errorsField.
        catch (NumberFormatException e) {
            errorsField.setText("Both inputs must be valid integers");
        }
    }//GEN-LAST:event_computeButtonActionPerformed

    //However user selects inputField1, it will highlight and select the text
    //currently in the field allowing quicker editing.
    private void inputField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputField1FocusGained
        inputField1.selectAll();
    }//GEN-LAST:event_inputField1FocusGained

    //However user selects inputField2, it will highlight and select the text
    //currently in the field allowing quicker editing.
    private void inputField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputField2FocusGained
        inputField2.selectAll();
    }//GEN-LAST:event_inputField2FocusGained

    //If the enter key is pressed while focus is on inputField1,
    //activates compute button as if it was explicitly clicked.
    private void inputField1EnterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputField1EnterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            computeButton.doClick();
        }
    }//GEN-LAST:event_inputField1EnterKeyPressed

    //If the enter key is pressed while focus is on inputField2,
    //activates compute button as if it was explicitly clicked.
    private void inputField2EnterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputField2EnterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            computeButton.doClick();
        }
    }//GEN-LAST:event_inputField2EnterKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GCDDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GCDDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GCDDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GCDDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GCDDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton computeButton;
    private javax.swing.JTextField errorsField;
    private javax.swing.JLabel errorsLabel;
    private javax.swing.JLabel gcdLabel;
    private javax.swing.JTextField inputField1;
    private javax.swing.JTextField inputField2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField resultField;
    private javax.swing.JLabel resultLabel;
    // End of variables declaration//GEN-END:variables
}